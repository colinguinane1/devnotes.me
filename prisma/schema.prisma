datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

model Author {
  id                   String    @id @unique
  full_name            String?
  verified             Boolean?  @default(false)
  bio                  String?
  pref_displayFullName Boolean?  @default(true)
  pref_displayEmail    Boolean?  @default(false)
  pref_displayBio      Boolean?  @default(true)
  twitter              String?
  github               String?
  linkedin             String?
  discord              String?
  image_url            String?
  last_sign_in_at      DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime? @updatedAt
  username             String?   @unique
  email                String    @unique
  Posts                Post[]    @relation("author")
  likedPosts           Post[]    @relation("likedBy")

  // Relationships
  subscribers   Subscription[] @relation("Subscriptions")
  subscriptions Subscription[] @relation("Subscribers")
  Comment       Comment[]
  Reply         Reply[]

  @@index([email]) // Index for faster email lookups
  @@index([username]) // Index for faster username lookups
  @@schema("public")
}

model Subscription {
  id             String @id @default(cuid())
  subscriberId   String
  subscribedToId String
  subscriber     Author @relation("Subscribers", fields: [subscriberId], references: [id])
  subscribedTo   Author @relation("Subscriptions", fields: [subscribedToId], references: [id])

  @@unique([subscriberId, subscribedToId]) // Ensure unique subscription pairs
  @@index([subscriberId]) // Index for faster subscriber lookups
  @@index([subscribedToId]) // Index for faster subscribedTo lookups
  @@schema("public")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] @relation("PostTags")

  @@index([name]) // Index for faster tag lookups
  @@schema("public")
}

model Post {
  id          String    @id @default(cuid())
  markdown    Boolean?  @default(false)
  description String?
  slug        String    @unique
  title       String
  cover_url   String?
  tags        Tag[]     @relation("PostTags")
  content     String
  views       Int       @default(0)
  likes       Int       @default(0)
  author      Author    @relation("author", fields: [user_id], references: [id])
  published   Boolean?  @default(false)
  updatedAt   DateTime
  createdAt   DateTime  @default(now())
  user_id     String
  likedBy     Author[]  @relation("likedBy")
  Comments    Comment[]

  @@index([user_id]) // Index for faster author lookups
  @@index([slug]) // Index for faster slug lookups
  @@schema("public")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  author    Author   @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  Reply     Reply[]

  @@index([authorId]) // Index for faster author lookups
  @@index([postId]) // Index for faster post lookups
  @@schema("public")
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  commentId String
  author    Author   @relation(fields: [authorId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())

  @@index([authorId]) // Index for faster author lookups
  @@index([commentId]) // Index for faster comment lookups
  @@schema("public")
}
